// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  // necessary for GitHub provider to work
  refresh_token_expires_in String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Board {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  title            String
  isFavourite      Boolean       @default(false)
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  lastInteractedAt DateTime      @default(now())
  columns          BoardColumn[]

  @@index([userId])
}

model BoardColumn {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  title     String
  board     Board       @relation(fields: [boardId], references: [id])
  boardId   String
  position  Int        @default(0)
  tasks     BoardTask[]

  @@index([boardId])
}

model BoardTask {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  title     String
  column    BoardColumn    @relation(fields: [columnId], references: [id])
  columnId  String
  position  Int
  subtasks  BoardSubtask[]

  @@index([columnId])
}

model BoardSubtask {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  title     String
  task      BoardTask @relation(fields: [taskId], references: [id])
  taskId    String
  position  Int
  isDone    Boolean   @default(false)

  @@index([taskId])
}
