// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  // necessary for GitHub provider to work
  refresh_token_expires_in String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  boardUsers    BoardUser[]

  @@index([name])
  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  MEMBER
  VIEWER
}

enum Permission {
  CREATE_COLUMN
  CREATE_TASK
  CREATE_SUBTASK
  UPDATE_OWN_COLUMN
  UPDATE_MEMBERS_COLUMN
  UPDATE_ADMINS_COLUMN
  UPDATE_OWN_TASK
  UPDATE_MEMBERS_TASK
  UPDATE_ADMINS_TASK
  UPDATE_OWN_SUBTASK
  UPDATE_MEMBERS_SUBTASK
  UPDATE_ADMINS_SUBTASK
  DELETE_OWN_COLUMN
  DELETE_MEMBERS_COLUMN
  DELETE_ADMINS_COLUMN
  DELETE_OWN_TASK
  DELETE_MEMBERS_TASK
  DELETE_ADMINS_TASK
  DELETE_OWN_SUBTASK
  DELETE_MEMBERS_SUBTASK
  DELETE_ADMINS_SUBTASK
}

model BoardPermission {
  id                 String            @id @default(cuid())
  permission         Permission
  memberPermissions  MemberPermission? @relation(fields: [memberPermissionId], references: [id], onDelete: Cascade)
  memberPermissionId String?

  @@unique([memberPermissionId, permission])
}

model MemberPermission {
  id          String            @id @default(cuid())
  board       Board             @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String
  permissions BoardPermission[]

  @@unique([boardId])
}

model BoardUser {
  id                String              @id @default(cuid())
  role              Role                @default(VIEWER)
  isFavourite       Boolean             @default(false)
  board             Board               @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId           String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  columns           BoardColumn[]
  tasks             BoardTask[]
  BoardTaskAssignee BoardTaskAssignee[]
  subtasks          BoardSubtask[]

  @@index([userId])
  @@index([boardId])
}

model Board {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  title             String
  user              User              @relation(fields: [userId], references: [id])
  boardUser         BoardUser[]
  userId            String
  lastInteractedAt  DateTime          @default(now())
  columns           BoardColumn[]
  memberPermissions MemberPermission?

  @@index([userId])
}

model BoardColumn {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  title     String
  board     Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  tasks     BoardTask[]
  color     String      @default("#0ea5e9")
  owner     BoardUser?  @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId   String?

  @@index([boardId])
  @@index([ownerId])
}

model BoardTask {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  startDate   DateTime            @default(now())
  dueDate     DateTime            @default(now())
  rank        String              @default("0|000000:")
  title       String
  description String?
  column      BoardColumn         @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  subtasks    BoardSubtask[]
  asignees    BoardTaskAssignee[]
  owner       BoardUser?          @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId     String?

  @@index([columnId])
  @@index([ownerId])
}

model BoardTaskAssignee {
  id          String    @id @default(cuid())
  boardTask   BoardTask @relation(fields: [boardTaskId], references: [id])
  boardTaskId String
  boardUser   BoardUser @relation(fields: [boardUserId], references: [id])
  boardUserId String

  @@index([boardTaskId])
  @@index([boardUserId])
}

model BoardSubtask {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  title     String
  task      BoardTask  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  isDone    Boolean    @default(false)
  owner     BoardUser? @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId   String?

  @@index([taskId])
  @@index([ownerId])
}
